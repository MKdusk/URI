#include <stdio.h>
#include <stdlib.h>


/*
    algoritmo merge sort
    https://pt.wikipedia.org/wiki/Merge_sort

    estava usando abs para calcular o modulo, nao precisa, em caso de numeros negativos da errado

*/

int m; // variavel global para pode usar dentro do merge sort

void merge(int *vetor, int comeco, int meio, int fim)
{
    int com1 = comeco, com2 = meio+1, comAux = 0, tam = fim-comeco+1;
    int *vetAux;
    vetAux = (int*)malloc(tam * sizeof(int));

    while(com1 <= meio && com2 <= fim)
    {

        if(vetor[com1] % m != vetor[com2] % m)
        {
            if(vetor[com1] % m < vetor[com2] % m)
            {
                vetAux[comAux] = vetor[com1];
                com1++;
            }
            else
            {
                vetAux[comAux] = vetor[com2];
                com2++;
            }
        }

        else if(vetor[com1] % m == vetor[com2] % m && (vetor[com1]%2==0 && vetor[com2]%2!=0) || (vetor[com1]%2!=0 && vetor[com2]%2==0))
        {
            if(vetor[com1]%2!=0)
            {
                vetAux[comAux] = vetor[com1];
                com1++;
            }
            else
            {
                vetAux[comAux] = vetor[com2];
                com2++;
            }
        }

        else if(vetor[com1] % m == vetor[com2] % m && vetor[com1]%2!=0 && vetor[com2]%2!=0)
        {
            if(vetor[com1] > vetor[com2])
            {
                vetAux[comAux] = vetor[com1];
                com1++;
            }
            else
            {
                vetAux[comAux] = vetor[com2];
                com2++;
            }
        }
        else if(vetor[com1] % m == vetor[com2] % m && vetor[com1]%2==0 && vetor[com2]%2==0)
        {
            if(vetor[com1] < vetor[com2])
            {
                vetAux[comAux] = vetor[com1];
                com1++;
            }
            else
            {
                vetAux[comAux] = vetor[com2];
                com2++;
            }
        }

        else
        {
            vetAux[comAux] = vetor[com2];
            com2++;
        }

        comAux++;
    }

    while(com1 <= meio)   //Caso ainda haja elementos na primeira metade
    {
        vetAux[comAux] = vetor[com1];
        comAux++;
        com1++;
    }

    while(com2 <= fim)     //Caso ainda haja elementos na segunda metade
    {
        vetAux[comAux] = vetor[com2];
        comAux++;
        com2++;
    }

    for(comAux = comeco; comAux <= fim; comAux++)     //Move os elementos de volta para o vetor original
    {
        vetor[comAux] = vetAux[comAux-comeco];
    }

    free(vetAux);
}

void mergeSort(int *vetor, int comeco, int fim)
{
    if (comeco < fim)
    {
        int meio = (fim+comeco)/2;

        mergeSort(vetor, comeco, meio);
        mergeSort(vetor, meio+1, fim);
        merge(vetor, comeco, meio, fim);
    }
}



int main()
{
    int n;
    int register i;

    while(scanf("%d %d",&n,&m))
    {
        int vetor[n];
        for(i=0; i<n; i++)
        {
            scanf("%d",&vetor[i]);
        }

        printf("%d %d\n",n,m);
        if(n==0 && m==0)
        {
            break;
        }

        mergeSort(vetor,0,n-1);
        for(i=0; i<n; i++)
        {
            printf("%d\n",vetor[i]);
        }

    }

    return 0;
}

