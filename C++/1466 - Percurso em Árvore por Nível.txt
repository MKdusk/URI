#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "queue"

typedef struct nodo{
    int info;
    struct nodo *esq;
    struct nodo *dir;
} Nodo;

typedef struct arv_bb{
    Nodo *raiz;
} Arv_bb;

using namespace std;

void libera_arv(Arv_bb* raiz);
void libera_nodo(Nodo* no);
void largura_arv(Arv_bb* a);
void abb_insere(Arv_bb* arv, int info);
Nodo *insere_no(Nodo *raiz, int info);
Arv_bb *cria_arvbb();

int c;

int main()
{
    int casos, n, info, caso = 1;
    cin >> casos;

    while(casos > 0){
        c = 0;
        arv_bb* arv = cria_arvbb();
        cin >> n;
        for(int i = 0; i < n; i++){
            cin >> info;
            abb_insere(arv, info);
        }
        cout << "Case " << caso << ":" << endl;
        largura_arv(arv);
        cout << endl;
        casos--;
        caso++;
        cout << endl;
    }

}

void libera_arv(Arv_bb* raiz){
    libera_nodo(raiz->raiz);
    free(raiz);
}

void libera_nodo(Nodo* no){
    if(no != NULL){
        libera_nodo(no->esq);
        libera_nodo(no->dir);
        free(no);
    }
}

void largura_arv(Arv_bb* a){
    queue<Nodo*> fila;
    fila.push(a->raiz);
    while(!fila.empty()){
        Nodo* p = fila.front();
        fila.pop();
        if(p){
            if(c == 0){
                cout << p->info;
                c++;
            } else {
                cout << " " << p->info;
            }
            fila.push(p->esq);
            fila.push(p->dir);
        }
    }
}

void abb_insere(Arv_bb* arv, int info){
    arv->raiz = insere_no(arv->raiz, info);
}

Nodo *insere_no(Nodo *raiz, int info){
    if(raiz == NULL){
        raiz = (Nodo*) malloc(sizeof(Nodo));
        raiz->esq = NULL;
        raiz->dir = NULL;
        raiz->info = info;
    }
    else if (info < raiz->info){
        raiz->esq = insere_no(raiz->esq, info);
    }
    else{
        raiz->dir = insere_no(raiz->dir, info);
    }
    return raiz;
}

Arv_bb *cria_arvbb(){
    Arv_bb *arv = (Arv_bb*) malloc(sizeof(Arv_bb));
    arv->raiz = NULL;
    return arv;
}





